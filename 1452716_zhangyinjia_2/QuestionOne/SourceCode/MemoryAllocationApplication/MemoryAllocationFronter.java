/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MemoryAllocationApplication;
import java.util.*;

/**
 *
 * @author deadoggy
 */
public class MemoryAllocationFronter extends javax.swing.JFrame {

    /**
     * Creates new form MemoryAllocationFronter
     */
    public MemoryAllocationFronter() {
        initComponents();
        MemoryState.setLineWrap(true);
        ProcessIDList = new ArrayList<>();
        MemNodeArray = new MemUnit[640];
        for(int i = 0; i < 640; i++)
        {
            MemNodeArray[i] = new MemUnit();
        }
        SetMemoryState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MethodButtonGroup = new javax.swing.ButtonGroup();
        UpPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MemoryState = new javax.swing.JTextArea();
        DownPanel = new javax.swing.JPanel();
        MiddleControllerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ProcessID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AllocateSize = new javax.swing.JTextField();
        AllocateConfirmButton = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        DownControllerPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        FreeProcessID = new javax.swing.JTextField();
        FreeConfirmButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MemoryState.setEditable(false);
        MemoryState.setColumns(20);
        MemoryState.setRows(5);
        jScrollPane1.setViewportView(MemoryState);

        javax.swing.GroupLayout UpPanelLayout = new javax.swing.GroupLayout(UpPanel);
        UpPanel.setLayout(UpPanelLayout);
        UpPanelLayout.setHorizontalGroup(
            UpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        UpPanelLayout.setVerticalGroup(
            UpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpPanelLayout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        MiddleControllerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Allocate"));

        jLabel1.setText("Input Size:");

        ProcessID.setText("ProcessID");

        jLabel2.setText("KB");

        jLabel3.setText("Input Process ID:");

        AllocateSize.setText("Size");

        AllocateConfirmButton.setText("Confirm");
        AllocateConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllocateConfirmButtonActionPerformed(evt);
            }
        });

        MethodButtonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("FF");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        MethodButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("BF");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Method:");

        javax.swing.GroupLayout MiddleControllerPanelLayout = new javax.swing.GroupLayout(MiddleControllerPanel);
        MiddleControllerPanel.setLayout(MiddleControllerPanelLayout);
        MiddleControllerPanelLayout.setHorizontalGroup(
            MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MiddleControllerPanelLayout.createSequentialGroup()
                .addGap(286, 286, 286)
                .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MiddleControllerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(234, 234, 234))
                    .addGroup(MiddleControllerPanelLayout.createSequentialGroup()
                        .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(39, 39, 39)
                        .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MiddleControllerPanelLayout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                                .addComponent(AllocateConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MiddleControllerPanelLayout.createSequentialGroup()
                                .addComponent(AllocateSize, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addComponent(ProcessID, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        MiddleControllerPanelLayout.setVerticalGroup(
            MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MiddleControllerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ProcessID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AllocateSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MiddleControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MiddleControllerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(AllocateConfirmButton))
        );

        DownControllerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Free"));

        jLabel4.setText("Input Process ID:");

        FreeProcessID.setText("ProcessID");

        FreeConfirmButton.setText("Confirm");
        FreeConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FreeConfirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DownControllerPanelLayout = new javax.swing.GroupLayout(DownControllerPanel);
        DownControllerPanel.setLayout(DownControllerPanelLayout);
        DownControllerPanelLayout.setHorizontalGroup(
            DownControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DownControllerPanelLayout.createSequentialGroup()
                .addGap(286, 286, 286)
                .addComponent(jLabel4)
                .addGap(34, 34, 34)
                .addComponent(FreeProcessID, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DownControllerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(FreeConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        DownControllerPanelLayout.setVerticalGroup(
            DownControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DownControllerPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(DownControllerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(FreeProcessID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FreeConfirmButton))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Output"));

        Result.setEditable(false);
        Result.setColumns(20);
        Result.setRows(5);
        jScrollPane2.setViewportView(Result);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DownPanelLayout = new javax.swing.GroupLayout(DownPanel);
        DownPanel.setLayout(DownPanelLayout);
        DownPanelLayout.setHorizontalGroup(
            DownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DownPanelLayout.createSequentialGroup()
                .addGroup(DownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DownControllerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(DownPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(MiddleControllerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DownPanelLayout.setVerticalGroup(
            DownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DownPanelLayout.createSequentialGroup()
                .addComponent(MiddleControllerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DownControllerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DownPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(UpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(UpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AllocateConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllocateConfirmButtonActionPerformed

        MemoryArrangementUnit Process = new MemoryArrangementUnit();
        //get Process ID
        String stringContainer = ProcessID.getText().trim(); 
        if( false == stringContainer.matches("[0-9]+"))
        {
            Result.setText("Please input Process ID!");
            return ;
        }
        Process.ID = Integer.parseInt(stringContainer);
        if(false == CheckProcessID(Process.ID))
        {
            Result.setText("Fail! The process has existed!");
            return ;
        }
        ProcessIDList.add(Process.ID);
        //get memory size
        int size;
        stringContainer = AllocateSize.getText().trim();
        if(false == stringContainer.matches("[0-9]+"))
        {
            Result.setText("Please input size!");
            return ;
        }
        size = Integer.parseInt(stringContainer);
        //allocate memory
        if(true == Controller.allocateMemory(Method, size, Process))
        {
            ProcessArray.add(Process);
            Result.setText("Succeed!");
            for(int i = Process.begin; i <= Process.end ; i++)
            {
                MemNodeArray[i].Ava = false;
                MemNodeArray[i].ID = Process.ID;
            }
            SetMemoryState();
        }else {
            Result.setText("Fail! Remaining memory may be not big enough or no unit can fit the requirement!");
        }
        
        
    }//GEN-LAST:event_AllocateConfirmButtonActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        //set FF method
        Method = 0;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
       //set BF methof
       Method = 1;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void FreeConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FreeConfirmButtonActionPerformed
        String stringContainer =  FreeProcessID.getText();
        if(false == stringContainer.matches("[0-9]+"))
        {
            Result.setText("Please input Process ID!");
            return ;
        }
        int ID = Integer.parseInt(stringContainer);
        MemoryArrangementUnit del = null;
        boolean Exist = false;
        for(int i = 0; i < ProcessArray.size(); i++)
        {
            if(ID == ProcessArray.get(i).ID)
            {
                Exist = true;
                del = ProcessArray.get(i);
                break;
            }
        }
        if(false == Exist)
        {
            Result.setText("Fail! Can not find process to free!");
        }
        else
        {
            if(true == Controller.freeMemory(del.begin,del.end))
            {
                Result.setText("Succeed!");
                ProcessArray.remove(del);
                DeleteProcessID(del.ID);
                for(int i = del.begin; i <= del.end; i++)
                {
                    MemNodeArray[i].Ava = true;
                    MemNodeArray[i].ID = -1;
                }
                SetMemoryState();
            }
            else
            {
                Result.setText("Fail! Can not find process to free!");
            }
        }
    }//GEN-LAST:event_FreeConfirmButtonActionPerformed

    private void SetMemoryState()
    {
        StringBuilder MemStateString = new StringBuilder();
        for(int i = 0; i < 640 ; i++)
        {
            if(true == MemNodeArray[i].Ava)
            {
                MemStateString.append("|?");
            }
            else
            {
                MemStateString.append("|");
                MemStateString.append(MemNodeArray[i].ID);
            }
        }
        MemoryState.setText(MemStateString.toString());
    }
    
    private boolean CheckProcessID(int ID)
    {
        for(int i =0; i < ProcessIDList.size(); i++)
        {
            if(ID == ProcessIDList.get(i))
            {
                return false;
            }
        }
        return true;
    }
    
    private boolean DeleteProcessID(int ID)
    {
        for(int i = 0; i < ProcessIDList.size(); i++)
        {
            if(ID == ProcessIDList.get(i))
            {
                ProcessIDList.remove(i);
                return true;
            }
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoryAllocationFronter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoryAllocationFronter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoryAllocationFronter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoryAllocationFronter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemoryAllocationFronter().setVisible(true);
                
            }
        });
    }           
    
    private class MemUnit{
        public boolean Ava;
        public int ID;
        MemUnit()
        {
            Ava = true;
            ID = -1;
        }
    }
    
    private MemUnit[] MemNodeArray ;
    private ArrayList<Integer> ProcessIDList;
    private int Method = 0;
    ArrayList<MemoryArrangementUnit> ProcessArray = new ArrayList<>();
    MemoryAllocationController Controller = new MemoryAllocationController();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AllocateConfirmButton;
    private javax.swing.JTextField AllocateSize;
    private javax.swing.JPanel DownControllerPanel;
    private javax.swing.JPanel DownPanel;
    private javax.swing.JButton FreeConfirmButton;
    private javax.swing.JTextField FreeProcessID;
    private javax.swing.JTextArea MemoryState;
    private javax.swing.ButtonGroup MethodButtonGroup;
    private javax.swing.JPanel MiddleControllerPanel;
    private javax.swing.JTextField ProcessID;
    private javax.swing.JTextArea Result;
    private javax.swing.JPanel UpPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
